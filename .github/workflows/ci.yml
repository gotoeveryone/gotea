name: Build

on: [push]

jobs:
  code_check_backend:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gotoeveryone/composer-php:7.4
    steps:
      - uses: actions/checkout@v1
      - name: Cache modules
        uses: actions/cache@v2
        id: vendor_cache
        with:
          path: vendor
          key: ${{ runner.OS }}-vendor-${{ hashFiles('**/composer.lock') }}
      - name: Install dependencies
        if: ${{ steps.vendor_cache.outputs.cache-hit != 'true' }}
        run: composer install
      - name: Execute code check
        run: composer cs-check

  code_check_frontend:
    runs-on: ubuntu-latest
    container:
      image: node:14.16.1
    steps:
      - uses: actions/checkout@v1
      - name: Cache modules
        uses: actions/cache@v2
        id: node_cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: ${{ steps.node_cache.outputs.cache-hit != 'true' }}
        run: npm i
      - name: Execute code check
        run: npm run lint

  test_backend:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gotoeveryone/composer-php:7.4
    services:
      database:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: gotea_test
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v1
      - name: Cache modules
        uses: actions/cache@v2
        id: vendor_cache
        with:
          path: vendor
          key: ${{ runner.OS }}-vendor-${{ hashFiles('**/composer.lock') }}
      - name: Generate dotenv
        run: cp .env.example .env
      - name: Install dependencies
        if: ${{ steps.vendor_cache.outputs.cache-hit != 'true' }}
        run: composer install
      - name: Execute test
        run: composer test

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    env:
      TAR_NAME: 'gotea_${{ github.run_number }}.tar.gz'
      SHELL_DEST_PATH: '~/deploy_${{ github.run_number }}.sh'
    runs-on: ubuntu-latest
    needs:
      - code_check_backend
      - code_check_frontend
      - test_backend
    container:
      image: node:14.16.1
    steps:
      - uses: actions/checkout@v1
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SECRET_KEY }}
          name: id_rsa-target
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          config: |
            Host *
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
            Host target
              HostName ${{ secrets.SSH_HOST }}
              User ${{ secrets.SSH_USER }}
              Port ${{ secrets.SSH_PORT }}
              IdentityFile ~/.ssh/id_rsa-target
      - name: Cache modules
        uses: actions/cache@v2
        id: node_cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: ${{ steps.node_cache.outputs.cache-hit != 'true' }}
        run: npm i
      - name: Build assets
        run: npm run prod
      - name: Transfer modules
        run: |
          tar czf ~/${TAR_NAME} bin/ config/ plugins/ resources/ src/ templates/ webroot/ composer.json composer.lock
          scp -r ~/${TAR_NAME} target:~/
          scp ./shell/deploy.sh target:${SHELL_DEST_PATH}
      - name: Deploy modules
        run: ssh target "${SHELL_DEST_PATH} ${TAR_NAME} gotea && rm -f ${SHELL_DEST_PATH}"

  notify:
    if: ${{ always() }}
    needs:
      - code_check_backend
      - code_check_frontend
      - test_backend
      - deploy
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v1
      - name: Notify to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          author_name: GitHub Actions
          fields: message,ref
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

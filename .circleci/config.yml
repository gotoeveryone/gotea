version: 2.0

references:
  save_composer_cache: &save_composer_cache
    name: Saving composer cache
    key: composer-v1-{{ checksum "composer.lock" }}
    paths:
      - vendor
  save_npm_cache: &save_npm_cache
    name: Saving npm cache
    key: node-v1-{{ checksum "package-lock.json" }}
    paths:
      - node_modules
  restore_composer_cache: &restore_composer_cache
    name: Restoring composer cache
    keys:
      - composer-v1-{{ checksum "composer.lock" }}
      - composer-v1-
  restore_npm_cache: &restore_npm_cache
    name: Restoring npm cache
    keys:
      - node-v1-{{ checksum "package-lock.json" }}
      - node-v1-

jobs:
  code_check_resources:
    docker:
      - image: circleci/node:14.16
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
    working_directory: ~/gotea
    steps:
      - checkout
      - restore_cache:
          <<: *restore_npm_cache
      - run: npm install
      - save_cache:
          <<: *save_npm_cache
      - run: npm run lint

  code_check_php:
    docker:
      - image: gotoeveryone/composer-php:7.4
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
    working_directory: ~/gotea
    steps:
      - checkout
      - restore_cache:
          <<: *restore_composer_cache
      - run: composer install -n --prefer-dist
      - save_cache:
          <<: *save_composer_cache
      - run: composer cs-check

  test:
    docker:
      - image: gotoeveryone/composer-php:7.4
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
      - image: circleci/mysql:5.7
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_DATABASE: gotea_test
    working_directory: ~/gotea
    steps:
      - checkout
      - run:
          name: install dockerize
          command: |
            curl -L https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz -O
            tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - restore_cache:
          <<: *restore_composer_cache
      - run: composer install -n --prefer-dist
      - save_cache:
          <<: *save_composer_cache
      - run: cp .env.example .env
      - run: composer test

  deploy:
    docker:
      - image: circleci/node:14.16
        auth:
          username: $DOCKER_HUB_USERNAME
          password: $DOCKER_HUB_ACCESS_TOKEN
    working_directory: ~/gotea
    steps:
      - checkout
      - restore_cache:
          <<: *restore_npm_cache
      - run: npm install
      - save_cache:
          <<: *save_npm_cache
      - run: npm run prod
      - run: echo "export TAR_NAME=${CIRCLE_PROJECT_REPONAME}-$(date +'%Y%m%d-%H%M%S').tar.gz" >> ${BASH_ENV}
      - run: tar czf ${TAR_NAME} bin/ config/ plugins/ resources/ src/ templates/ webroot/ composer.json composer.lock
      - run: echo 'StrictHostKeyChecking no' >> ~/.ssh/config
      - run: scp -P ${SSH_PORT} ${TAR_NAME} ${SSH_USER}@${SSH_HOST}:${HOME_DIR}/tmp
      - run: scp -P ${SSH_PORT} shell/deploy.sh ${SSH_USER}@${SSH_HOST}:${HOME_DIR}/tmp/deploy_${CIRCLE_PROJECT_REPONAME}.sh
      - run: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} "${HOME_DIR}/tmp/deploy_${CIRCLE_PROJECT_REPONAME}.sh ${HOME_DIR} ${CIRCLE_PROJECT_REPONAME}"
      - run: ssh -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} "rm -f ${HOME_DIR}/tmp/deploy_${CIRCLE_PROJECT_REPONAME}.sh"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - code_check_resources:
          filters:
            branches:
              ignore: main
      - code_check_php:
          filters:
            branches:
              ignore: main
      - test:
          filters:
            branches:
              ignore: main
      - deploy:
          filters:
            branches:
              only: main
